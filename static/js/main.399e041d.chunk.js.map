{"version":3,"sources":["components/LoginPage.js","App.js","reportWebVitals.js","index.js"],"names":["toast","configure","SignupSchema","Yup","shape","email","required","password","min","max","LoginPage","props","useState","showPassword","setShowPassword","showPasswordHandler","prev","className","style","Navbar","collapseOnSelect","expand","variant","Brand","backgroundColor","initialValues","validationSchema","onSubmit","values","success","position","POSITION","TOP_CENTER","hideProgressBar","autoClose","errors","touched","name","id","type","placeholder","htmlFor","class","cursor","icon","faEye","faEyeSlash","onClick","Button","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RASAA,IAAMC,YAEN,IAAMC,EAAeC,MAAaC,MAAM,CACtCC,MAAOF,MAAaE,MAAM,iBAAiBC,SAAS,YACpDC,SAAUJ,MACPK,IAAI,EAAG,gDACPC,IAAI,GAAI,aACRH,SAAS,cAmHCI,EAhHG,SAACC,GAAW,IAAD,EACaC,oBAAS,GADtB,mBACpBC,EADoB,KACNC,EADM,KAErBC,EAAsB,WAC1BD,GAAgB,SAACE,GAAD,OAAWA,MAE7B,OACE,qBAAKC,UAAU,2BAA2BC,MAAO,GAAjD,SACE,sBAAKD,UAAU,YAAf,UACE,cAACE,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,QAAQ,QAA7C,SACE,cAACH,EAAA,EAAOI,MAAR,CAAcN,UAAU,UAAxB,2BAEF,qBACEA,UAAU,2CACVC,MAAO,CAAEM,gBAAiB,QAF5B,SAIE,cAAC,IAAD,CACEC,cAAe,CACbpB,MAAO,GACPE,SAAU,IAEZmB,iBAAkBxB,EAClByB,SAAU,SAACC,GACT5B,IAAM6B,QAAN,iBACYD,EAAOvB,MADnB,uBACuCuB,EAAOrB,UAC5C,CACEuB,SAAU9B,IAAM+B,SAASC,WACzBC,iBAAiB,EACjBC,UAAW,OAZnB,SAiBG,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,eAAC,IAAD,WACE,qBAAKnB,UAAU,WAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,cAAC,IAAD,CACEoB,KAAK,QACLC,GAAG,QACHC,KAAK,QACLC,YAAY,QACZvB,UACEkB,EAAO9B,OAAS+B,EAAQ/B,MACpB,0BACA,iBAGR,uBAAOoC,QAAQ,QAAQxB,UAAU,OAAjC,mBAGCkB,EAAO9B,OAAS+B,EAAQ/B,MACvB,qBAAKY,UAAU,yCAAf,SACGkB,EAAO9B,QAER,UAGR,qBAAKY,UAAU,kBAAf,SACE,sBAAKA,UAAU,cAAf,UACE,sBAAKA,UAAU,2CAAf,UACE,cAAC,IAAD,CACEoB,KAAK,WACLC,GAAG,WACHC,KAAM1B,EAAe,OAAS,WAC9B2B,YAAY,WACZvB,UACEkB,EAAO5B,UAAY6B,EAAQ7B,SACvB,0BACA,iBAIR,sBACEmC,MAAM,mBACNxB,MAAO,CAAEyB,OAAQ,WACjBL,GAAG,qBAHL,SAKE,cAAC,IAAD,CACEM,KAAM/B,EAAegC,IAAQC,IAC7B7B,UAAU,YACV8B,QAAShC,MAGb,uBAAO0B,QAAQ,WAAWxB,UAAU,OAApC,yBAIDkB,EAAO5B,UAAY6B,EAAQ7B,SAC1B,qBAAKU,UAAU,yCAAf,SACGkB,EAAO5B,WAER,UAGR,qBAAKU,UAAU,oBAAf,SACE,cAAC+B,EAAA,EAAD,CACET,KAAK,SACLjB,QAAQ,OACRL,UAAU,8BAHZ,mCCvGHgC,MARf,WACE,OACE,qBAAKhC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.399e041d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Navbar, Button } from \"react-bootstrap\";\nimport \"./Form.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEye, faEyeSlash } from \"@fortawesome/free-solid-svg-icons\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\ntoast.configure();\n\nconst SignupSchema = Yup.object().shape({\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\n  password: Yup.string()\n    .min(6, \"Too Short! Must be atleast 6 characters long\")\n    .max(18, \"Too Long!\")\n    .required(\"Required\"),\n});\n\nconst LoginPage = (props) => {\n  const [showPassword, setShowPassword] = useState(false);\n  const showPasswordHandler = () => {\n    setShowPassword((prev) => !prev);\n  };\n  return (\n    <div className=\"container-fluid bg-white\" style={{}}>\n      <div className=\"container\">\n        <Navbar collapseOnSelect expand=\"lg\" variant=\"light\">\n          <Navbar.Brand className=\"mx-auto\">Lorem Ipsum</Navbar.Brand>\n        </Navbar>\n        <div\n          className=\"col-md-4 mx-auto p-3 rounded-2 shadow-sm\"\n          style={{ backgroundColor: \"#eee\" }}\n        >\n          <Formik\n            initialValues={{\n              email: \"\",\n              password: \"\",\n            }}\n            validationSchema={SignupSchema}\n            onSubmit={(values) => {\n              toast.success(\n                `Email: ${values.email}, Password: ${values.password}`,\n                {\n                  position: toast.POSITION.TOP_CENTER,\n                  hideProgressBar: true,\n                  autoClose: 3000,\n                }\n              );\n            }}\n          >\n            {({ errors, touched }) => (\n              <Form>\n                <div className=\"form-row\">\n                  <div className=\"form-label-group col-12 mt-3\">\n                    <Field\n                      name=\"email\"\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"Email\"\n                      className={\n                        errors.email && touched.email\n                          ? \"form-control is-invalid\"\n                          : \"form-control\"\n                      }\n                    ></Field>\n                    <label htmlFor=\"email\" className=\"mb-1\">\n                      Email\n                    </label>\n                    {errors.email && touched.email ? (\n                      <div className=\"text-danger ml-2 text-capitalize small\">\n                        {errors.email}\n                      </div>\n                    ) : null}\n                  </div>\n                </div>\n                <div className=\"form-row d-flex\">\n                  <div className=\"col-12 mt-3\">\n                    <div className=\"form-label-group col-12 mt-3 input-group\">\n                      <Field\n                        name=\"password\"\n                        id=\"password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Password\"\n                        className={\n                          errors.password && touched.password\n                            ? \"form-control is-invalid\"\n                            : \"form-control\"\n                        }\n                      ></Field>\n\n                      <span\n                        class=\"input-group-text\"\n                        style={{ cursor: \"pointer\" }}\n                        id=\"inputGroupPrepend3\"\n                      >\n                        <FontAwesomeIcon\n                          icon={showPassword ? faEye : faEyeSlash}\n                          className=\"text-dark\"\n                          onClick={showPasswordHandler}\n                        />\n                      </span>\n                      <label htmlFor=\"password\" className=\"mb-1\">\n                        Password\n                      </label>\n                    </div>\n                    {errors.password && touched.password ? (\n                      <div className=\"text-danger ml-2 text-capitalize small\">\n                        {errors.password}\n                      </div>\n                    ) : null}\n                  </div>\n                </div>\n                <div className=\"d-flex w-100 mt-3\">\n                  <Button\n                    type=\"submit\"\n                    variant=\"none\"\n                    className=\"btn-outline-primary mx-auto\"\n                  >\n                    Login\n                  </Button>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPage;\n","import \"./App.css\";\nimport LoginPage from \"./components/LoginPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LoginPage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}